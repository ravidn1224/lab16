name: full CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPO: ${{ secrets.ECR_REPOSITORY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
                python-version: '3.11'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v2

        - name: Run tests
          run: |
            pytest
            echo "Tests completed successfully"
        
        - name: Build, Tag, and Push Image
          env:
            ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          run: |
            IMAGE_URI=$ECR_REGISTRY/$ECR_REPO:latest
  
            docker build -t $IMAGE_URI .
            docker push $IMAGE_URI
  
            echo "Image pushed to $IMAGE_URI"

        # - name: Set up SSH
        #   uses: webfactory/ssh-agent@v0.9.0
        #   with:
            # ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
        - name: Deploy on EC2
          uses: appleboy/ssh-action@v0.1.10
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            port: '22'
            script: |

              hostname
              whoami
              uptime
              IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest
              
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
              
              docker pull $IMAGE_URI

              docker stop myapp || true
              docker rm myapp || true

              docker run -d --name myapp -p 80:3000 $IMAGE_URI

      